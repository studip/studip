{"version":3,"sources":["webpack://@studip/core/./resources/vue/components/BlubberPublicComposer.vue?44a5","webpack://@studip/core/resources/vue/components/BlubberPublicComposer.vue","webpack://@studip/core/./resources/vue/components/BlubberPublicComposer.vue?924b","webpack://@studip/core/./resources/vue/components/BlubberPublicComposer.vue","webpack://@studip/core/./node_modules/vue-loader/lib/runtime/componentNormalizer.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","shape","size","role","_v","placeholder","toLocaleString","on","keyup","$event","type","indexOf","_k","keyCode","key","ctrlKey","shiftKey","altKey","metaKey","submit","saveCommentToSession","change","title","staticStyle","display","multiple","upload","_withStripped","component","options","__file","normalizeComponent","scriptExports","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","concat","exports"],"mappings":"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","file":"javascripts/609.chunk.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"writer\" },\n    [\n      _c(\"studip-icon\", {\n        attrs: { shape: \"blubber\", size: \"30\", role: \"info\" }\n      }),\n      _vm._v(\" \"),\n      _c(\"textarea\", {\n        attrs: {\n          placeholder: \"Schreib was, frag was. Enter zum Abschicken.\".toLocaleString()\n        },\n        on: {\n          keyup: [\n            function($event) {\n              if (\n                !$event.type.indexOf(\"key\") &&\n                _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n              ) {\n                return null\n              }\n              if (\n                $event.ctrlKey ||\n                $event.shiftKey ||\n                $event.altKey ||\n                $event.metaKey\n              ) {\n                return null\n              }\n              return _vm.submit($event)\n            },\n            _vm.saveCommentToSession\n          ],\n          change: _vm.saveCommentToSession\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"label\",\n        {\n          staticClass: \"upload\",\n          attrs: { title: \"Datei hochladen\".toLocaleString() }\n        },\n        [\n          _c(\"input\", {\n            staticStyle: { display: \"none\" },\n            attrs: { type: \"file\", multiple: \"\" },\n            on: { change: _vm.upload }\n          }),\n          _vm._v(\" \"),\n          _c(\"studip-icon\", { attrs: { shape: \"upload\", size: \"30\" } })\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"writer\">\n        <studip-icon shape=\"blubber\" size=\"30\" role=\"info\"></studip-icon>\n        <textarea :placeholder=\"'Schreib was, frag was. Enter zum Abschicken.'.toLocaleString()\"\n                  @keyup.enter.exact=\"submit\"\n                  @keyup=\"saveCommentToSession\" @change=\"saveCommentToSession\"></textarea>\n        <label class=\"upload\" :title=\"'Datei hochladen'.toLocaleString()\">\n            <input type=\"file\" multiple style=\"display: none;\" @change=\"upload\">\n            <studip-icon shape=\"upload\" size=\"30\"></studip-icon>\n        </label>\n    </div>\n</template>\n<script>\n    export default {\n        name: 'blubber-public-composer',\n        methods: {\n            submit (text) {\n                if (!text || typeof text !== \"string\") {\n                    text = $(this.$el).find(\"textarea\").val();\n                    $(this.$el).find(\"textarea\").val(\"\");\n                    sessionStorage.removeItem(\n                        'BlubberMemory-Writer-Public'\n                    );\n                }\n                if (!text.trim()) {\n                    return false;\n                }\n                let thread = this;\n\n                //AJAX-Request ...\n                STUDIP.api.POST(`blubber/threads`, {\n                    data: {\n                        content: text\n                    }\n                }).done((data) => {\n                    this.$parent.addPosting(data.thread_posting);\n                });\n            },\n            saveCommentToSession (event) {\n                let value = event.target.value;\n                sessionStorage.setItem(\n                    `BlubberMemory-Writer-Public`,\n                    value\n                );\n            },\n            upload (event) {\n                let files = typeof event.dataTransfer !== 'undefined'\n                    ? event.dataTransfer.files // file drop\n                    : event.target.files; // upload button\n                let writer = this;\n                let data = new FormData();\n                for (let i in files) {\n                    if (files[i].size > 0) {\n                        data.append(`file_${i}`, files[i], files[i].name.normalize());\n                    }\n                }\n\n                let request = new XMLHttpRequest();\n                request.open('POST', `${STUDIP.ABSOLUTE_URI_STUDIP}dispatch.php/blubber/upload_files`);\n                request.upload.addEventListener('progress', (event) => {\n                    var percent = 0;\n                    var position = event.loaded || event.position;\n                    var total = event.total;\n                    if (event.lengthComputable) {\n                        percent = Math.ceil(position / total * 100);\n                    }\n                    //Set progress\n                    $(writer.$el).css('background-size', `${percent}% 100%`);\n                });\n                request.addEventListener('load', function (event) {\n                    let output = JSON.parse(this.response);\n                    $(writer.$el).find(\"textarea\").val(\n                        $(writer.$el).find(\"textarea\").val()\n                        + \" \"\n                        + output.inserts.join(\" \")\n                    );\n                });\n                request.addEventListener('loadend', function (event) {\n                    $(writer.$el).css('background-size', '0% 100%');\n                });\n                request.send(data);\n            }\n        },\n        mounted () { //when everything is initialized\n            this.$nextTick(function () {\n                $(this.$el).find('textarea').autoResize({\n                    animateDuration: 0,\n                    // More extra space:\n                    extraSpace: 1\n                });\n                let memory = sessionStorage.getItem(`BlubberMemory-Writer-Public`);\n                if (memory) {\n                    $(this.$el).find('textarea').val(memory);\n                }\n            });\n        }\n    }\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BlubberPublicComposer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BlubberPublicComposer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BlubberPublicComposer.vue?vue&type=template&id=ee91d02e&\"\nimport script from \"./BlubberPublicComposer.vue?vue&type=script&lang=js&\"\nexport * from \"./BlubberPublicComposer.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/tleilax/Code/studip-trunk/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('ee91d02e')) {\n      api.createRecord('ee91d02e', component.options)\n    } else {\n      api.reload('ee91d02e', component.options)\n    }\n    module.hot.accept(\"./BlubberPublicComposer.vue?vue&type=template&id=ee91d02e&\", function () {\n      api.rerender('ee91d02e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/vue/components/BlubberPublicComposer.vue\"\nexport default component.exports","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n        injectStyles.call(\n          this,\n          (options.functional ? this.parent : this).$root.$options.shadowRoot\n        )\n      }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n"],"sourceRoot":""}