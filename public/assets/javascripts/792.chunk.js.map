{"version":3,"sources":["webpack://@studip/core/./resources/vue/components/BlubberThread.vue?a2ab","webpack://@studip/core/resources/vue/components/BlubberThread.vue","webpack://@studip/core/./resources/vue/components/BlubberThread.vue?963c","webpack://@studip/core/./resources/vue/components/BlubberThread.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","id","thread_data","thread_posting","thread_id","on","dragover","$event","preventDefault","dragleave","drop","upload","directives","name","rawName","content","trim","timestamp","mkdate","relative","_v","href","getUserProfileURL","user_username","_s","user_name","style","backgroundImage","avatar","domProps","innerHTML","html","_e","comments","length","toLocaleString","more_up","file","width","_l","sortedComments","comment","key","comment_id","class","title","keyup","type","indexOf","_k","keyCode","ctrlKey","shiftKey","altKey","metaKey","saveComment","undefined","editComment","writable","click","shape","size","role","answerComment","more_down","commentable","placeholder","submit","editPreviousComment","saveCommentToSession","change","staticStyle","display","multiple","_withStripped","component","options","__file"],"mappings":"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","file":"javascripts/792.chunk.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"blubber_thread\",\n      attrs: {\n        id: \"blubberthread_\" + _vm.thread_data.thread_posting.thread_id\n      },\n      on: {\n        dragover: function($event) {\n          $event.preventDefault()\n          return _vm.dragover($event)\n        },\n        dragleave: function($event) {\n          $event.preventDefault()\n          return _vm.dragleave($event)\n        },\n        drop: function($event) {\n          $event.preventDefault()\n          return _vm.upload($event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [{ name: \"scroll\", rawName: \"v-scroll\" }],\n          staticClass: \"scrollable_area\"\n        },\n        [\n          _c(\"div\", { staticClass: \"all_content\" }, [\n            _vm.thread_data.thread_posting.content.trim()\n              ? _c(\"div\", { staticClass: \"thread_posting\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"contextinfo\" },\n                    [\n                      _c(\"studip-date-time\", {\n                        attrs: {\n                          timestamp: _vm.thread_data.thread_posting.mkdate,\n                          relative: true\n                        }\n                      }),\n                      _vm._v(\" \"),\n                      _c(\n                        \"a\",\n                        {\n                          attrs: {\n                            href: _vm.getUserProfileURL(\n                              _vm.thread_data.thread_posting.user_username\n                            )\n                          }\n                        },\n                        [\n                          _vm._v(\n                            _vm._s(_vm.thread_data.thread_posting.user_name)\n                          )\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"a\", {\n                        staticClass: \"avatar\",\n                        style: {\n                          backgroundImage:\n                            \"url(\" + _vm.thread_data.thread_posting.avatar + \")\"\n                        },\n                        attrs: {\n                          href: _vm.getUserProfileURL(\n                            _vm.thread_data.thread_posting.user_username\n                          )\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"div\", {\n                    staticClass: \"content\",\n                    domProps: {\n                      innerHTML: _vm._s(_vm.thread_data.thread_posting.html)\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"div\", { staticClass: \"link_to_comments\" })\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            !_vm.thread_data.thread_posting.content.trim() &&\n            !_vm.thread_data.comments.length\n              ? _c(\"div\", { staticClass: \"empty_blubber_background\" }, [\n                  _c(\"div\", {\n                    domProps: {\n                      innerHTML: _vm._s(\n                        \"Starte die Konversation jetzt!\".toLocaleString()\n                      )\n                    }\n                  })\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\n              \"ol\",\n              { staticClass: \"comments\", attrs: { \"aria-live\": \"polite\" } },\n              [\n                _vm.thread_data.more_up\n                  ? _c(\n                      \"li\",\n                      { staticClass: \"more\" },\n                      [\n                        _c(\"studip-asset-img\", {\n                          attrs: {\n                            file: \"ajax-indicator-black.svg\",\n                            width: \"20\"\n                          }\n                        })\n                      ],\n                      1\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm._l(_vm.sortedComments, function(comment) {\n                  return _c(\n                    \"li\",\n                    {\n                      key: comment.comment_id,\n                      class: comment.class,\n                      attrs: { \"data-comment_id\": comment.comment_id }\n                    },\n                    [\n                      _c(\"a\", {\n                        staticClass: \"avatar\",\n                        style: {\n                          backgroundImage: \"url(\" + comment.avatar + \")\"\n                        },\n                        attrs: {\n                          href: _vm.getUserProfileURL(comment.user_username),\n                          title: comment.user_name\n                        }\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"content\" }, [\n                        _c(\n                          \"a\",\n                          {\n                            staticClass: \"name\",\n                            attrs: {\n                              href: _vm.getUserProfileURL(comment.user_username)\n                            }\n                          },\n                          [_vm._v(_vm._s(comment.user_name))]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"div\", {\n                          staticClass: \"html\",\n                          domProps: { innerHTML: _vm._s(comment.html) }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\"textarea\", {\n                          staticClass: \"edit\",\n                          domProps: { innerHTML: _vm._s(comment.content) },\n                          on: {\n                            keyup: [\n                              function($event) {\n                                if (\n                                  !$event.type.indexOf(\"key\") &&\n                                  _vm._k(\n                                    $event.keyCode,\n                                    \"enter\",\n                                    13,\n                                    $event.key,\n                                    \"Enter\"\n                                  )\n                                ) {\n                                  return null\n                                }\n                                if (\n                                  $event.ctrlKey ||\n                                  $event.shiftKey ||\n                                  $event.altKey ||\n                                  $event.metaKey\n                                ) {\n                                  return null\n                                }\n                                return _vm.saveComment($event)\n                              },\n                              function($event) {\n                                if (\n                                  !$event.type.indexOf(\"key\") &&\n                                  _vm._k(\n                                    $event.keyCode,\n                                    \"escape\",\n                                    undefined,\n                                    $event.key,\n                                    undefined\n                                  )\n                                ) {\n                                  return null\n                                }\n                                if (\n                                  $event.ctrlKey ||\n                                  $event.shiftKey ||\n                                  $event.altKey ||\n                                  $event.metaKey\n                                ) {\n                                  return null\n                                }\n                                return _vm.editComment($event)\n                              }\n                            ]\n                          }\n                        })\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"time\" },\n                        [\n                          _c(\"studip-date-time\", {\n                            attrs: { timestamp: comment.mkdate, relative: true }\n                          }),\n                          _vm._v(\" \"),\n                          comment.writable\n                            ? _c(\n                                \"a\",\n                                {\n                                  staticClass: \"edit_comment\",\n                                  attrs: {\n                                    href: \"\",\n                                    title: \"Bearbeiten.\".toLocaleString()\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      $event.preventDefault()\n                                      return _vm.editComment($event)\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"studip-icon\", {\n                                    attrs: {\n                                      shape: \"edit\",\n                                      size: \"14\",\n                                      role: \"inactive\"\n                                    }\n                                  })\n                                ],\n                                1\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _c(\n                            \"a\",\n                            {\n                              staticClass: \"answer_comment\",\n                              attrs: {\n                                href: \"\",\n                                title: \"Hierauf antworten.\".toLocaleString()\n                              },\n                              on: {\n                                click: function($event) {\n                                  $event.preventDefault()\n                                  return _vm.answerComment($event)\n                                }\n                              }\n                            },\n                            [\n                              _c(\"studip-icon\", {\n                                attrs: {\n                                  shape: \"export\",\n                                  size: \"14\",\n                                  role: \"inactive\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      )\n                    ]\n                  )\n                }),\n                _vm._v(\" \"),\n                _vm.thread_data.more_down\n                  ? _c(\n                      \"li\",\n                      { staticClass: \"more\" },\n                      [\n                        _c(\"studip-asset-img\", {\n                          attrs: {\n                            file: \"ajax-indicator-black.svg\",\n                            width: \"20\"\n                          }\n                        })\n                      ],\n                      1\n                    )\n                  : _vm._e()\n              ],\n              2\n            )\n          ])\n        ]\n      ),\n      _vm._v(\" \"),\n      _vm.thread_data.thread_posting.commentable\n        ? _c(\n            \"div\",\n            { staticClass: \"writer\" },\n            [\n              _c(\"studip-icon\", {\n                attrs: { shape: \"blubber\", size: \"30\", role: \"info\" }\n              }),\n              _vm._v(\" \"),\n              _c(\"textarea\", {\n                attrs: {\n                  placeholder: _vm.thread_data.thread_posting.content.trim()\n                    ? \"Kommentar schreiben. Enter zum Abschicken.\".toLocaleString()\n                    : \"Nachricht schreiben. Enter zum Abschicken\".toLocaleString()\n                },\n                on: {\n                  keyup: [\n                    function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      if (\n                        $event.ctrlKey ||\n                        $event.shiftKey ||\n                        $event.altKey ||\n                        $event.metaKey\n                      ) {\n                        return null\n                      }\n                      return _vm.submit($event)\n                    },\n                    function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"up\", 38, $event.key, [\n                          \"Up\",\n                          \"ArrowUp\"\n                        ])\n                      ) {\n                        return null\n                      }\n                      if (\n                        $event.ctrlKey ||\n                        $event.shiftKey ||\n                        $event.altKey ||\n                        $event.metaKey\n                      ) {\n                        return null\n                      }\n                      return _vm.editPreviousComment($event)\n                    },\n                    _vm.saveCommentToSession\n                  ],\n                  change: _vm.saveCommentToSession\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\n                \"a\",\n                {\n                  staticClass: \"send\",\n                  attrs: { title: \"Abschicken\".toLocaleString() },\n                  on: { click: _vm.submit }\n                },\n                [\n                  _c(\"studip-icon\", { attrs: { shape: \"arr_2up\", size: \"30\" } })\n                ],\n                1\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"label\",\n                {\n                  staticClass: \"upload\",\n                  attrs: { title: \"Datei hochladen\".toLocaleString() }\n                },\n                [\n                  _c(\"input\", {\n                    staticStyle: { display: \"none\" },\n                    attrs: { type: \"file\", multiple: \"\" },\n                    on: { change: _vm.upload }\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"studip-icon\", { attrs: { shape: \"upload\", size: \"30\" } })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        : _vm._e()\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"blubber_thread\"\n         :id=\"'blubberthread_' + thread_data.thread_posting.thread_id\"\n         @dragover.prevent=\"dragover\" @dragleave.prevent=\"dragleave\"\n         @drop.prevent=\"upload\">\n        <div class=\"scrollable_area\" v-scroll>\n            <div class=\"all_content\">\n                <div class=\"thread_posting\" v-if=\"thread_data.thread_posting.content.trim()\">\n                    <div class=\"contextinfo\">\n                        <studip-date-time :timestamp=\"thread_data.thread_posting.mkdate\" :relative=\"true\"></studip-date-time>\n                        <a :href=\"getUserProfileURL(thread_data.thread_posting.user_username)\">{{ thread_data.thread_posting.user_name }}</a>\n                        <a :href=\"getUserProfileURL(thread_data.thread_posting.user_username)\" class=\"avatar\" :style=\"{ backgroundImage: 'url(' + thread_data.thread_posting.avatar + ')' }\"></a>\n                    </div>\n                    <div class=\"content\" v-html=\"thread_data.thread_posting.html\"></div>\n                    <div class=\"link_to_comments\"></div>\n                </div>\n\n                <div v-if=\"!thread_data.thread_posting.content.trim() && !thread_data.comments.length\" class=\"empty_blubber_background\">\n                    <div v-html=\"'Starte die Konversation jetzt!'.toLocaleString()\">\n\n                    </div>\n                </div>\n\n                <ol class=\"comments\" aria-live=\"polite\">\n\n                    <li class=\"more\" v-if=\"thread_data.more_up\">\n                        <studip-asset-img file=\"ajax-indicator-black.svg\" width=\"20\"></studip-asset-img>\n                    </li>\n\n                    <li :class=\"comment.class\"\n                        v-for=\"comment in sortedComments\"\n                        :data-comment_id=\"comment.comment_id\"\n                        :key=\"comment.comment_id\">\n                        <a :href=\"getUserProfileURL(comment.user_username)\" class=\"avatar\" :title=\"comment.user_name\" :style=\"{ backgroundImage: 'url(' + comment.avatar + ')' }\"></a>\n                        <div class=\"content\">\n                            <a :href=\"getUserProfileURL(comment.user_username)\" class=\"name\">{{ comment.user_name }}</a>\n                            <div v-html=\"comment.html\" class=\"html\"></div>\n                            <textarea class=\"edit\"\n                                      v-html=\"comment.content\"\n                                      @keyup.enter.exact=\"saveComment\"\n                                      @keyup.escape.exact=\"editComment\"></textarea>\n                        </div>\n                        <div class=\"time\">\n                            <studip-date-time :timestamp=\"comment.mkdate\" :relative=\"true\"></studip-date-time>\n                            <a href=\"\" v-if=\"comment.writable\" @click.prevent=\"editComment\" class=\"edit_comment\" :title=\"'Bearbeiten.'.toLocaleString()\">\n                                <studip-icon shape=\"edit\" size=\"14\" role=\"inactive\"></studip-icon>\n                            </a>\n                            <a href=\"\" @click.prevent=\"answerComment\" class=\"answer_comment\" :title=\"'Hierauf antworten.'.toLocaleString()\">\n                                <studip-icon shape=\"export\" size=\"14\" role=\"inactive\"></studip-icon>\n                            </a>\n                        </div>\n                    </li>\n\n                    <li class=\"more\" v-if=\"thread_data.more_down\">\n                        <studip-asset-img file=\"ajax-indicator-black.svg\" width=\"20\"></studip-asset-img>\n                    </li>\n\n                </ol>\n            </div>\n        </div>\n        <div class=\"writer\" v-if=\"thread_data.thread_posting.commentable\">\n            <studip-icon shape=\"blubber\" size=\"30\" role=\"info\"></studip-icon>\n            <textarea :placeholder=\"thread_data.thread_posting.content.trim() ? 'Kommentar schreiben. Enter zum Abschicken.'.toLocaleString() : 'Nachricht schreiben. Enter zum Abschicken'.toLocaleString()\"\n                      @keyup.enter.exact=\"submit\"\n                      @keyup.up.exact=\"editPreviousComment\"\n                      @keyup=\"saveCommentToSession\" @change=\"saveCommentToSession\"></textarea>\n            <a class=\"send\" @click=\"submit\" :title=\"'Abschicken'.toLocaleString()\">\n                <studip-icon shape=\"arr_2up\" size=\"30\"></studip-icon>\n            </a>\n            <label class=\"upload\" :title=\"'Datei hochladen'.toLocaleString()\">\n                <input type=\"file\" multiple style=\"display: none;\" @change=\"upload\">\n                <studip-icon shape=\"upload\" size=\"30\"></studip-icon>\n            </label>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'blubber-thread',\n        data: function () {\n            return {\n                already_loading_up: 0,\n                already_loading_down: 0\n            };\n        },\n        props: ['thread_data'],\n        methods: {\n            submit (text) {\n                if (!text || typeof text !== \"string\") {\n                    text = $(this.$el).find(\".writer textarea\").val();\n                    $(this.$el).find(\".writer textarea\").val(\"\");\n                    if (this.thread_data.thread_posting.thread_id) {\n                        sessionStorage.removeItem(\n                            'BlubberMemory-Writer-' + this.thread_data.thread_posting.thread_id\n                        );\n                    }\n                }\n                if (!text.trim()) {\n                    return false;\n                }\n                let formatted_text = text.replace(/\\n/g, \"<br>\");\n                let comment = {\n                    comment_id: Math.random().toString(36),\n                    avatar: '',\n                    html: formatted_text,\n                    content: text,\n                    mkdate:  Math.floor(Date.now() / 1000),\n                    name: 'Nobody',\n                    class: 'mine new',\n                    writable: 1\n                };\n                this.addComment(comment);\n                let thread = this;\n\n                //AJAX-Request ...\n                STUDIP.api.POST(`blubber/threads/${this.thread_data.thread_posting.thread_id}/comments`, {\n                    data: {\n                        content: text\n                    }\n                }).done((data) => {\n                    comment.comment_id = data.comment_id;\n                    comment.avatar = data.avatar;\n                    comment.user_name = data.user_name;\n                    comment.mkdate = data.mkdate;\n                    comment.html = data.html;\n                    comment.class = data.class;\n\n                    thread.$nextTick(() => {\n                        STUDIP.Markup.element($(thread.$el).find(`.comments > li[data-comment_id=\"${data.comment_id}\"]`));\n                    });\n                });\n\n                this.$nextTick(() => {\n                    // DOM updated\n                    this.scrollDown();\n                });\n            },\n            saveCommentToSession (event) {\n                let value = event.target.value;\n                if (this.thread_data.thread_posting.thread_id) {\n                    sessionStorage.setItem(\n                        `BlubberMemory-Writer-${this.thread_data.thread_posting.thread_id}`,\n                        value\n                    );\n                }\n                $(this.$el).find('.writer').toggleClass(\n                    'filled',\n                    value.trim() !== ''\n                );\n            },\n            scrollDown () {\n                this.$nextTick(function () {\n                    let element = this.$el;\n\n                    let scroll = () => {\n                        $(element).find('.scrollable_area').scrollTo(\n                            $(element).find('.scrollable_area .all_content').height()\n                        );\n                    };\n\n                    $(element).find('.scrollable_area img').on('load', scroll);\n                    scroll();\n                });\n            },\n            addComments (comments, new_ones) {\n                comments.forEach((comment) => {\n                    if (new_ones) {\n                        comment.class += ' new';\n                    }\n                    this.addComment(comment);\n                });\n            },\n            addComment (comment) {\n                this.$nextTick(() => {\n                    STUDIP.Markup.element($(this.$el).find(`.comments > li[data-comment_id=\"${comment.comment_id}\"]`));\n                });\n                for (let i in this.thread_data.comments) {\n                    if (this.thread_data.comments[i].comment_id === comment.comment_id) {\n                        this.thread_data.comments[i].content = comment.content;\n                        this.thread_data.comments[i].html = comment.html;\n                        return;\n                    }\n                }\n                this.thread_data.comments.push(comment);\n            },\n            removeComment (comment_id) {\n                this.thread_data.comments.forEach((comment, i) => {\n                    if (comment.comment_id === comment_id) {\n                        this.$delete(this.thread_data.comments, i);\n                    }\n                });\n            },\n            upload (event) {\n                let files = typeof event.dataTransfer !== 'undefined'\n                    ? event.dataTransfer.files // file drop\n                    : event.target.files; // upload button\n                let thread = this;\n                let data = new FormData();\n                for (let i in files) {\n                    if (files[i].size > 0) {\n                        data.append(`file_${i}`, files[i], files[i].name.normalize());\n                    }\n                }\n\n                var request = new XMLHttpRequest();\n                request.open('POST', `${STUDIP.ABSOLUTE_URI_STUDIP}dispatch.php/blubber/upload_files`);\n                request.upload.addEventListener('progress', (event) => {\n                    var percent = 0;\n                    var position = event.loaded || event.position;\n                    var total = event.total;\n                    if (event.lengthComputable) {\n                        percent = Math.ceil(position / total * 100);\n                    }\n                    //Set progress\n                    $(thread.$el).find('.writer').css('background-size', `${percent}% 100%`);\n                });\n                request.addEventListener('load', function (event) {\n                    let output = JSON.parse(this.response);\n                    thread.submit(output.inserts.join(\" \"));\n                });\n                request.addEventListener('loadend', function (event) {\n                    $(thread.$el).find('.writer').css('background-size', '0% 100%');\n                });\n                request.send(data);\n\n                this.dragleave();\n            },\n            dragover () {\n                $(this.$el).addClass('dragover');\n            },\n            dragleave () {\n                $(this.$el).removeClass('dragover');\n            },\n            getUserProfileURL (username) {\n                return STUDIP.URLHelper.getURL('dispatch.php/profile', {\n                    username: username\n                });\n            },\n            editComment (event) {\n                let li;\n                if (typeof event === 'string') {\n                    let comment_id = event;\n                    li = $(this.$el).find(`.comments > li[data-comment_id=\"${comment_id}\"]`);\n                } else {\n                    li = $(event.target).closest('li[data-comment_id]');\n                    let comment_id = $(event.target).closest('li[data-comment_id]').data('comment_id');\n                }\n                li.find('.content').toggleClass('editing');\n                let textarea = li.find('.content textarea').last()[0];\n                textarea.focus();\n                textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n                li.find('.content textarea:not(.auto-resizable)').addClass('auto-resizable').autoResize({\n                    animateDuration: 0\n                });\n            },\n            answerComment (event) {\n                let li;\n                if (typeof event === 'string') {\n                    let comment_id = event;\n                    li = $(this.$el).find(`.comments > li[data-comment_id=\"${comment_id}\"]`);\n                } else {\n                    li = $(event.target).closest('li[data-comment_id]');\n                    let comment_id = $(event.target).closest('li[data-comment_id]').data('comment_id');\n                }\n                let comment_id = $(li).data('comment_id');\n                let comment_data = null;\n                this.thread_data.comments.forEach((comment, i) => {\n                    if (comment.comment_id === comment_id) {\n                        comment_data = comment;\n                    }\n                });\n                if (comment_data) {\n                    let quote = '[quote=' + comment_data.user_name + ']' + (comment_data.content.replace(/\\[quote[^\\]]*\\].*\\[\\/quote\\]/g, '')).trim() + \"[/quote]\\n\";\n                    $(this.$el).find('.writer textarea').val(quote);\n                    let textarea = $(this.$el).find('.writer textarea').last()[0];\n                    textarea.focus();\n                    textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n                }\n            },\n            saveComment (event) {\n                let thread = this;\n                let li = $(event.target).closest('li[data-comment_id]');\n                let comment_id = li.data('comment_id');\n                let content = li.find('textarea').val();\n\n                thread.thread_data.comments.forEach((comment) => {\n                    if (comment.comment_id === comment_id) {\n                        comment.html = content;\n                    }\n                });\n\n                li.find('.content').removeClass('editing');\n\n                STUDIP.api.PUT(`blubber/threads/${this.thread_data.thread_posting.thread_id}/comments/${comment_id}`, {\n                    data: {\n                        content: content\n                    },\n                }).done((output) => {\n                    if (output.content.trim()) {\n                        thread.thread_data.comments.forEach((comment) => {\n                            if (comment.comment_id === comment_id) {\n                                comment.html = output.html;\n                                comment.content = output.content;\n\n                                thread.$nextTick(() => {\n                                    STUDIP.Markup.element($(thread.$el).find(`.comments > li[data-comment_id=\"${comment_id}\"]`));\n                                });\n                            }\n                        });\n                    } else {\n                        thread.removeComment(comment_id);\n                    }\n                    $(thread.$el).find('.writer textarea').focus();\n                });\n            },\n            removeDeletedComments: function (comment_ids) {\n                for (let i in comment_ids) {\n                    this.removeComment(comment_ids[i]);\n                }\n            },\n            editPreviousComment () {\n                if (!$(this.$el).find('.writer textarea').val().trim()) {\n                    let comment = $(this.$el).find('.comments li.mine').last();\n                    if (comment.length > 0) {\n                        this.editComment(comment.data('comment_id'));\n                    }\n                }\n            }\n        },\n        directives: {\n            scroll: {\n                // directive definition\n                inserted: function (el) {\n                    let thread = $(el).closest('.blubber_thread')[0].__vue__;\n\n                    $(el).on('scroll', (event) => {\n                        let top = $(el).scrollTop();\n                        let height = $(el).find('.all_content').height();\n\n                        $(el).toggleClass('scrolled', top > 0);\n\n                        thread.$root.display_context_posting = top >= $(el).find('.all_content .thread_posting').height()\n                            ? 1\n                            : 0;\n                        if (thread.thread_data.more_up && top < 1000 && !thread.already_loading_up) {\n                            thread.already_loading_up = 1;\n\n                            let earliest_mkdate = thread.thread_data.comments.reduce((min, comment) => {\n                                return min === null ? comment.mkdate : Math.min(min, comment.mkdate);\n                            }, null);\n\n                            //load older comments\n                            STUDIP.api.GET(`blubber/threads/${thread.thread_data.thread_posting.thread_id}/comments`, {\n                                data: {\n                                    modifier: 'olderthan',\n                                    timestamp: earliest_mkdate,\n                                    limit: 50\n                                }\n                            }).done((data) => {\n                                top = $(el).scrollTop();\n                                thread.addComments(data.comments, false);\n                                thread.thread_data.more_up = data.more_up;\n                                thread.$nextTick(function () {\n                                    //scroll to the position where we were:\n                                    let new_height = $(el).find(\".all_content\").height();\n                                    let new_scroll_top = new_height - height + top;\n                                    $(el).scrollTo(\n                                        new_scroll_top\n                                    );\n                                });\n                            }).done(() => {\n                                thread.already_loading_up = 0;\n                            });\n                        }\n\n                        if (thread.thread_data.more_down && (top > $(thread).find(\".scrollable_area .all_content\").height() - 1000) && !thread.already_loading_down) {\n                            thread.already_loading_down = 1;\n\n                            let latest_mkdate = thread.thread_data.comments.reduce((max, comment) => {\n                                return Math.max(max, comment.mkdate);\n                            }, null);\n\n                            //load newer comments\n                            STUDIP.api.GET(`blubber/threads/${thread.thread_data.thread_posting.thread_id}/comments`, {\n                                data: {\n                                    modifier: 'newerthan',\n                                    timestamp: latest_mkdate,\n                                    limit: 50\n                                }\n                            }).done((data) => {\n                                thread.addComments(data.comments, false);\n                                thread.thread_data.more_down = data.more_down;\n                            }).always(() => {\n                                thread.already_loading_down = 0;\n                            });\n                        }\n                    });\n                }\n            }\n        },\n        mounted () { //when everything is initialized\n            this.$nextTick(function () {\n                if (this.thread_data.comments.length > 0) {\n                    this.scrollDown();\n                }\n\n                $(this.$el).find('.writer textarea').autoResize({\n                    animateDuration: 0,\n                    // More extra space:\n                    extraSpace: 1\n                });\n\n                $(this.$el).find('.comments .content .html').each(function () {\n                    STUDIP.Markup.element(this);\n                });\n\n                if (this.thread_data.thread_posting.thread_id) {\n                    let memory = sessionStorage.getItem(`BlubberMemory-Writer-${this.thread_data.thread_posting.thread_id}`);\n                    if (memory) {\n                        $(this.$el)\n                            .find('.writer').addClass('filled')\n                            .find('textarea').val(memory);\n                    }\n                }\n            });\n        },\n        computed: {\n            sortedComments () {\n                return this.thread_data.comments.sort((a, b) => a.mkdate - b.mkdate);\n            }\n        },\n        updated () {\n            this.$nextTick(function () {\n                if (this.thread_data.thread_posting.thread_id) {\n                    let memory = sessionStorage.getItem('BlubberMemory-Writer-' + this.thread_data.thread_posting.thread_id);\n                    $(this.$el).find('.writer textarea').val(memory);\n                }\n            });\n        },\n        watch: {\n            thread_data (new_data, old_data) {\n                if (new_data.thread_posting.thread_id !== old_data.thread_posting.thread_id) {\n                    //if the thread got reloaded by a new thread\n                    //markup contents\n                    this.$nextTick(function () {\n                        $(this.$el).find(\".comments .content .html\").each(function () {\n                            STUDIP.Markup.element(this);\n                        });\n                    });\n                    //and scroll down:\n                    this.scrollDown();\n                }\n            }\n        }\n    }\n</script>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BlubberThread.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BlubberThread.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BlubberThread.vue?vue&type=template&id=308ad6ca&\"\nimport script from \"./BlubberThread.vue?vue&type=script&lang=js&\"\nexport * from \"./BlubberThread.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/mlunzena/Sync/Projects/studip/devActivities/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('308ad6ca')) {\n      api.createRecord('308ad6ca', component.options)\n    } else {\n      api.reload('308ad6ca', component.options)\n    }\n    module.hot.accept(\"./BlubberThread.vue?vue&type=template&id=308ad6ca&\", function () {\n      api.rerender('308ad6ca', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/vue/components/BlubberThread.vue\"\nexport default component.exports"],"sourceRoot":""}